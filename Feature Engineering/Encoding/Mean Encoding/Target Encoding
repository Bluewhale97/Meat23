# 1. Mean Encoding or Target Encoding
# Mean encoding, also known as target encoding, is a method where you replace a categorical variable with the mean of the target variable for each category. This method can be useful when dealing with high cardinality categorical variables.


# 2. scenario
# the target variable should be numeric, because we need to use the mean of the target variable


# 3. pros
# quick
# returns pandas dataframe

# 4. cons
# it does not preserve information from train data to propagate to test data
# cause overfitting

# 5. how to work it
# let's calculate the mean target value per category for cabin

y_train.groupby(X_train["cabin"]).mean()

# and now let's do the same but capturing the result in a dictionary

ordered_labels = y_train.groupby(X_train["cabin"]).mean().to_dict()

ordered_labels

# now, we replace the labels with the target means

X_train["cabin"] = X_train["cabin"].map(ordered_labels)
X_test["cabin"] = X_test["cabin"].map(ordered_labels)

# let's explore the result

X_train["cabin"].head(10)

# we can turn the previous commands into 2 functions


def find_category_mappings(df, variable, target):
    return target.groupby(df[variable]).mean().to_dict()


def integer_encode(train, test, variable, ordinal_mapping):

    train[variable] = train[variable].map(ordinal_mapping)
    test[variable] = test[variable].map(ordinal_mapping)

# and now we run a loop over the remaining categorical variables

for variable in ["sex", "embarked"]:
    mappings = find_category_mappings(X_train, variable, y_train)
    integer_encode(X_train, X_test, variable, mappings)

# let's see the result

X_train.head()

# let's inspect the newly created monotonic relationship
# between the variables and the target

for var in ["cabin", "sex", "embarked"]:

    fig = plt.figure()
    fig = y_train.groupby(X_train[var]).mean().plot()
    fig.set_title("Monotonic relationship between {} and Survival".format(var))
    fig.set_ylabel("Mean Survived")
    plt.show()

# let's inspect the newly created monotonic relationship
# between the variables and the target

for var in ["cabin", "sex", "embarked"]:

    fig = plt.figure()
    fig = y_test.groupby(X_test[var]).mean().plot()
    fig.set_title("Monotonic relationship between {} and Survival".format(var))
    fig.set_ylabel("Mean Survived")
    plt.show()


# 6. work it on feature engine
ordinal_enc = OrdinalEncoder(
    # NOTE that we indicate ordered in the encoding_method, otherwise it assings numbers arbitrarily
    encoding_method="ordered",
    variables=["Neighborhood", "Exterior1st", "Exterior2nd"],
)
# when fitting the transformer, we need to pass the target as well
# just like with any Scikit-learn predictor class

ordinal_enc.fit(X_train, y_train)
# in the encoder dict we can observe the number of
# in the encoder dict we can observe each of the top categories
# selected for each of the variables
X_train = ordinal_enc.transform(X_train)
X_test = ordinal_enc.transform(X_test)

# let's explore the result
X_train.head()


# let's inspect the newly created monotonic relationship
# between the variables and the target

for var in ["Neighborhood", "Exterior1st", "Exterior2nd"]:

    fig = plt.figure()
    fig = y_train.groupby(X_train[var]).mean().plot()
    fig.set_title("Monotonic relationship between {} and SalePrice".format(var))
    fig.set_ylabel("Mean SalePrice")
    plt.show()


# let's inspect the newly created monotonic relationship
# between the variables and the target

for var in ["Neighborhood", "Exterior1st", "Exterior2nd"]:

    fig = plt.figure()
    fig = y_test.groupby(X_test[var]).mean().plot()
    fig.set_title("Monotonic relationship between {} and SalePrice".format(var))
    fig.set_ylabel("Mean SalePrice")
    plt.show()

# 7. Mean Encoding with feature engine
mean_enc = MeanEncoder(variables=["cabin", "sex", "embarked"])
# when fitting the transformer, we need to pass the target as well
# just like with any Scikit-learn predictor class

mean_enc.fit(X_train, y_train)

# in the encoder dict we see the target mean assigned to each
# category for each of the selected variables

mean_enc.encoder_dict_

# this is the list of variables that the encoder will transform

mean_enc.variables_

X_train = mean_enc.transform(X_train)
X_test = mean_enc.transform(X_test)

# let's explore the result
X_train.head()